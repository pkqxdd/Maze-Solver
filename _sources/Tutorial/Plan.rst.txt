.. _Project_Proposal:

================
Project Proposal
================

.. contents::
    :local:

Goals
=====

:Primary Goal:  make a robot that can explore and find the optimal solution of a maze made by colored tapes.
:Secondary Goal: make a graphic user interface that can display the maze solving process in real time.

Parts Needed
============

To be purchased:

.. csv-table::
    :header: name, price, part number

    Raspberry Pi 3 Model B,35,
    8 GB micro SD Card,8,
    NXP Precision 9DoF Breakout,14.95,Adafruit Product ID 3463
    Reflectance Sensor Array,9.95,QTR-8RC
    Total:,67.9,

Existing parts:

- 2 DC motors
- 4 wheels
- Some jumpers
- 1 H-bridge
- 1 container for the processors (lasercut)


Constrait of the Maze
=====================

All the turns of the maze must be exactly 90 degrees. The line thickness should be greater than 3.5mm and less than 1.1mm (Based on the reflectance sensor array). The maze itself can be any size, with or without loops.


Software Development Phases
===========================

Phase One: Abstract Data Structure
Phase Two: Communication: Raspberry Pi to Arduino
Phase Three: Communication: Raspberry Pi to LAN
Phase Four: Arduino Driver
Phase Five (Strech Goal): Graphic User Interface (real time map exploration process)

Hardware Development Phases
===========================

Just mount/connect the hardwares all at once.

Strategies
==========

- Connect and communicate a Raspberry Pi 3 Model B with an Arduino Uno via an USB cable.
- Use the Arduion to preprocess/control all the sensor data and motors while the raspberry pi doing all the data modeling/calculation
    * Only 5 bytes are required to send all data from Arduino to Raspberry Pi, so using the serial interface should be enough
        * 1 byte for data from the reflectance sensor array
        * 2 byte for data from gyroscope
        * 2 byte for data from magnetometer
    * Only 1 byte is required to receive instruction from Raspberry Pi. The possible instructions are
        * Turn left
        * Turn right
        * Turn around (or go backward maybe, not sure which one is better)
        * Go forward for (duration)
        * Start
        * Stop
        * Continue current task
    * Driving a robot does not require very high computational speed. My guess is that 20 fps should be fast enough.
    * Raspberry Pi has 4 cores, which means it can do multiple tasks in parallel:
        #. Relay data from arduino to LAN
        #. Process data from arduino
        #. Send data to arduino
        #. System kernal task
- Explore and constract a "map" of the maze with gyro/mag sensor.
- After finishing the exporation, find the optimal solution using A* algorithm with manhattan distance as the heuristics function.

Data Structure Requirement
==========================

#. The abstract data structure can be used in both direction. That is, it can be used to build a map or build from an existing map.
#. It is suitable for performing a graph search on.
#. It can be serialized and deserialized for network transmission.
