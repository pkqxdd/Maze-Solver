=====================
Thursday, October 26
=====================

I implemented :class:`VisualizedMaze` today. I spent the entire afternoon plus study hours doing this. Programming is just so addictive to me, even more addictive than video games. Now I finally have a GUI debugger for the maze. I also fixed some minor bugs.

.. raw:: html

    <video width="681" height="373" controls>
    <source src="../_static/Oct26.mp4" type="video/mp4">
    </video>

I'm so glad I learned :class:`tkinter` when I was bored back in April

VisualizedMaze.py
=================

.. code-block:: python

    #!/usr/local/bin/python3.6
    # coding=utf-8

    from Maze import Maze, NoSolution
    from DataStructures import Node, Edge
    from AbstractBaseClasses import BaseNode
    import tkinter as tk
    import tkinter.ttk
    import math, random, warnings


    class VisualizedMaze(tk.Tk, Maze):
        # TODO: add a function to scale the coordinate plane

        def __init__(self, control=True):
            super().__init__()

            self.attributes('-topmost', True)
            self.title('Maze Solver')
            Maze.__init__(self)

            self.coordinate_plane = CoordinatePlane(self)
            self.controls = Controls(self)
            self.coordinate_plane.create_axes()
            self.create_origin()

            self.coordinate_plane.grid(row=0, column=0)
            tk.ttk.Separator(self, orient='vertical').grid(row=0, column=1, sticky='ns')
            self.controls.grid(row=0, column=2, padx=20, sticky='nsew')

            if not control:
                self.hide_controls()

        def hide_controls(self):
            self.controls.grid_forget()

        def create_origin(self):
            self.origin = self.add_node(0, 0)

        def add_node(self, x, y, isDeadEnd=False, color='black'):
            n = Maze.add_node(self, x, y,
                              isDeadEnd)  # x and y is in respect to the logical coordinate plane, not to tk.Canvas
            x += self.coordinate_plane.width // 2
            y = self.coordinate_plane.height // 2 - y
            self.coordinate_plane.create_oval(x + 4, y + 4, x - 4, y - 4, fill=color, outline=color)
            self.coordinate_plane.create_text(x + 15, y - 10, text='n%d' % n.index, fill='gray30')
            self.coordinate_plane.update_idletasks()
            return n

        def connect(self, n0: int, n1: int, color='black'):
            if super().connect(n0, n1):
                x0 = BaseNode.registry[n0].x + self.coordinate_plane.width // 2
                x1 = BaseNode.registry[n1].x + self.coordinate_plane.width // 2
                y0 = self.coordinate_plane.height // 2 - BaseNode.registry[n0].y
                y1 = self.coordinate_plane.height // 2 - BaseNode.registry[n1].y
                distance = self.calculate_distance(x0, y0, x1, y1)
                self.coordinate_plane.create_line(x0, y0, x1, y1, fill=color)
                self.coordinate_plane.create_text(*self.calculate_midpoint(x0, y0, x1, y1), text=str(distance),
                                                  fill='royal blue')
                self.coordinate_plane.update_idletasks()
                return True
            else:
                return False

        @staticmethod
        def calculate_distance(x0: int, y0: int, x1: int, y1: int) -> int:
            return round(math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2))

        @staticmethod
        def calculate_midpoint(x0: int, y0: int, x1: int, y1: int) -> (int, int):
            return (x0 + x1) // 2, (y0 + y1) // 2

        def search_and_highlight(self, n0: int, n1: int):
            try:
                self.coordinate_plane.highlight_nodes(self.search_route(BaseNode.registry[n0], BaseNode.registry[n1]))
            except NoSolution:
                self.coordinate_plane.create_text(self.coordinate_plane.width // 2, self.coordinate_plane.height // 2,
                                                  text="No Solution Found", tag='highlight', fill='red',
                                                  font=("Times", 36, 'bold'))

        def randomly_generate_and_connect(self, n):
            with warnings.catch_warnings():  # temporarily suppress warnings from connecting Nodes
                warnings.filterwarnings('ignore')
                width = self.coordinate_plane.width // 2 - 20
                height = self.coordinate_plane.height // 2 - 20
                for i in range(n):
                    self.add_node(random.randrange(0, width) * random.choice([1, -1]),
                                  random.randrange(0, height) * random.choice([1, -1]))

                    for r in range(2):
                        t = 0
                        s = self.connect(i+1, random.randint(0, len(BaseNode.registry)-1))
                        while not s:
                            s = self.connect(i+1, random.randint(0, len(BaseNode.registry)-1))
                            if t > 3: break
                            t += 1
        #TODO: write a function to generate manhattan styled maze only

    class CoordinatePlane(tk.Canvas):
        def __init__(self, root: tk.Tk):
            self.height = round(root.winfo_screenheight() * 0.8)
            self.width = round(root.winfo_screenwidth() * 0.8)
            super().__init__(root, width=self.width, height=self.height)

            self.bind('<Enter>', self.event_mouse_enter)
            self.bind('<Leave>', self.event_mouse_leave)

        def create_axes(self, color='gray'):
            self.create_line(0, self.height // 2, self.width, self.height // 2, fill=color)  # x axis
            self.create_line(self.width // 2, 0, self.width // 2, self.height, fill=color)  # y axis

            self.create_text(20, self.height // 2 + 10, text=str(-self.width // 2), fill=color)  # x axis labels
            self.create_text(self.width - 20, self.height // 2 + 10, text=str(self.width // 2), fill=color)

            self.create_text(self.width // 2 - 20, 10, text=str(self.height // 2), fill=color)
            self.create_text(self.width // 2 - 20, self.height - 10, text=str(-self.height // 2),
                             fill=color)  # y axis labels

        def event_mouse_enter(self, event):
            self.bind('<Motion>', self.show_cursor_coordinate)

        def event_mouse_leave(self, event):
            self.unbind('<Motion>')
            self.delete('coordinate')

        def show_cursor_coordinate(self, event):
            "Display current cursor coordinate on top-right corner"
            self.delete('coordinate')
            x = round(event.x - self.width / 2)
            y = round(self.height / 2 - event.y)
            self.create_text(60, 20, text='x=%d, y=%d' % (x, y), tag='coordinate')

        def highlight_nodes(self, nodes: list, color='gold'):
            "This function will highlight every node and its path. It is meant to be used on the return value of search_route"
            i = 0
            while i < len(nodes):
                x = nodes[i].x + self.width // 2
                y = self.height // 2 - nodes[i].y

                if i != 0:
                    self.create_oval(x + 4, y + 4, x - 4, y - 4, fill=color, outline=color, tag='highlight')
                    self.create_line(x, y, previous_x, previous_y, fill=color, tag='highlight')
                else:
                    self.create_oval(x + 4, y + 4, x - 4, y - 4, fill="green", outline="green", tag='highlight')
                previous_x = x
                previous_y = y
                i += 1

            self.create_oval(x + 4, y + 4, x - 4, y - 4, fill="red", outline="red", tag='highlight')  # Mark the last one

            self.update_idletasks()

        def remove_highlight(self):
            self.delete('highlight')
            self.update_idletasks()


    class Controls(tk.Frame):
        def __init__(self, root: VisualizedMaze):
            super().__init__(root, width=root.winfo_screenwidth() * 0.2, height=root.winfo_screenheight() * 0.8)
            self.create_add_node_control().grid(row=0)
            self.create_connection_control().grid(row=1)
            self.create_solution_control().grid(row=2)
            self.create_random_control().grid(row=3)

            self.grid_rowconfigure(0, weight=1)
            self.grid_rowconfigure(1, weight=1)
            self.grid_rowconfigure(2, weight=1)
            self.grid_rowconfigure(3, weight=1)

        def create_add_node_control(self):
            def validation(text):
                if text == '': return True
                try:
                    int(text)
                except:
                    return False
                else:
                    return True

            validation = self.master.register(validation)
            self.add_node_controls = tk.LabelFrame(self, text='Add a New Node')
            tk.Label(self.add_node_controls, text="x:").grid(row=0, column=0)
            n0 = tk.Entry(self.add_node_controls, width=3, validate='all', validatecommand=(validation, '%P'))
            n0.grid(row=0, column=1)
            tk.Label(self.add_node_controls, text="y:").grid(row=0, column=2)
            n1 = tk.Entry(self.add_node_controls, width=3, validate='all', validatecommand=(validation, '%P'))
            n1.grid(row=0, column=3)
            print(n0.get())
            tk.Button(self.add_node_controls, text='Add',
                      command=lambda: self.master.add_node(int(n0.get()), int(n1.get()))).grid(row=1, columnspan=10)

            return self.add_node_controls

        def create_connection_control(self):
            def validation(text):
                if text == '': return True
                try:
                    n = int(text)
                except:
                    return False
                else:
                    if n >= len(BaseNode.registry):
                        return False
                    else:
                        return True

            validation = self.master.register(validation)

            self.connection_controls = tk.LabelFrame(self, text='Connect Two Nodes')
            tk.Label(self.connection_controls, text="From n").grid(row=0, column=0)
            n0 = tk.Entry(self.connection_controls, width=2, validate='all', validatecommand=(validation, '%P'))
            n0.grid(row=0, column=1)
            tk.Label(self.connection_controls, text=" to n").grid(row=0, column=2)
            n1 = tk.Entry(self.connection_controls, width=2, validate='all', validatecommand=(validation, '%P'))
            n1.grid(row=0, column=3)
            tk.Button(self.connection_controls, text='Connect',
                      command=lambda: self.master.connect(int(n0.get()), int(n1.get()))).grid(row=1, columnspan=10)

            return self.connection_controls

        def create_solution_control(self):

            def validation(text):
                if text == '': return True
                try:
                    n = int(text)
                except:
                    return False
                else:
                    if n >= len(BaseNode.registry):
                        return False
                    else:
                        return True

            validation = self.master.register(validation)

            self.solution_controls = tk.LabelFrame(self, text='Find the Shortest Route')
            tk.Label(self.solution_controls, text="From n").grid(row=0, column=0)
            n0 = tk.Entry(self.solution_controls, width=2, validate='all', validatecommand=(validation, '%P'))
            n0.grid(row=0, column=1)
            tk.Label(self.solution_controls, text=" to n").grid(row=0, column=2)
            n1 = tk.Entry(self.solution_controls, width=2, validate='all', validatecommand=(validation, '%P'))
            n1.grid(row=0, column=3)
            tk.Button(self.solution_controls, text='Solve',
                      command=lambda: self.master.search_and_highlight(int(n0.get()), int(n1.get()))).grid(row=1, column=0,
                                                                                                           columnspan=2)
            tk.Button(self.solution_controls, text='Clear', command=self.master.coordinate_plane.remove_highlight).grid(
                row=1, column=2, columnspan=2)
            return self.solution_controls

        def create_random_control(self):

            def validation(text):
                if text == '': return True
                try:
                    n = int(text)
                except:
                    return False
                else:
                    return True

            validation = self.master.register(validation)

            self.solution_controls = tk.LabelFrame(self, text='Generate Random Nodes')
            tk.Label(self.solution_controls, text="Number of nodes").grid(row=0, column=0)
            n = tk.Entry(self.solution_controls, width=2, validate='all', validatecommand=(validation, '%P'))
            n.grid(row=0, column=1)
            tk.Button(self.solution_controls, text='Generate',
                      command=lambda: self.master.randomly_generate_and_connect(int(n.get()))).grid(row=1, column=0,
                                                                                                    columnspan=2)

            return self.solution_controls


    if __name__ == "__main__":
        maze = VisualizedMaze()
        maze.mainloop()
