=====================
Saturnday, October 14
=====================

I couldn't sleep until about 2 a.m. last night, because I was too excited about the project I will be doing. Despite the fact that I do not have any parts to work on, I can still write the abstract data structure for the maze solver. In my programming class (MITx 6.00.2x), I learned that abstraction is very important. When it is done properly, codes can work the same way even if the low level implementation is changed completely. This is kind of like Python the language itself: there are a lot of variation of implementation (CPython, PyPy, Jython, IronPython, etc.) on different platforms (Windows, macOS, Linux, etc.), but the programming interface remains the same throughout.

This is actually similar to what I'm about to do: I will run the same program on two different platforms (macOS and Raspbian) at the same time. They will have same result, but very different on low level details:

.. csv-table::
    :header: Platform, Input From, Output To,Output Formats, Purpose

    Raspberry Pi, Arduino, Arduino, Commands, Control the robot to explore the maze
    Macbook, Relayed data from Raspberry Pi,Screen, Graphics, Display and visualize the real-time progress of the robot

So I wrote the :ref:`ABC` and :ref:`Data_Structures`. Below are the codes as of today, the final results may be very different.

AbstractBaseClasses.py
======================

.. code-block:: Python

    #!/usr/local/bin/python3.6
    # -*- coding:utf-8 -*-

    class DirectionNotExist(Exception): pass

    class BaseNode:
        """A node is the intersection of two lines, or a dead end"""
        registry = set()
        next_index = 0
        radius = 5  # The radius of a node is actually the tolerance of error in a node's coordinate. The shape of a node is actually a squre, not a circle

        def __new__(cls, *args, **kwargs):
            """Assign each class instance a unique id number"""
            instance = super().__new__(cls)
            instance.__index = BaseNode.next_index
            BaseNode.next_index += 1
            BaseNode.registry.add(instance)
            cls.registry.add(instance)
            return instance

        def __init__(self, *coordinate: (int, int), N=None, S=None, E=None, W=None):
            """
            :param coordinate: a 2-tuple (x,y)
            :param N: An instance of BaseEdge, default to None
            :param S: An instance of BaseEdge, default to None
            :param E: An instance of BaseEdge, default to None
            :param W: An instance of BaseEdge, default to None
            """
            try:
                assert isinstance(coordinate, (tuple, list))
                assert len(coordinate) == 2
                assert isinstance(coordinate[0], int)
                assert isinstance(coordinate[1], int)
            except AssertionError:
                err = TypeError("Coordinate must be a tuple (x,y), where x and y are int")
                err.__suppress_context__ = True
                raise err



            self.coordinate = coordinate

            self.north_edge = N
            self.south_edge = S
            self.east_edge = E
            self.west_edge = W

        @property
        def index(self):
            return self.__index

        def __hash__(self):
            """Make nodes hashable so that they can be stored in a hashtable"""
            return self.index

        def __repr__(self):
            return "<BaseNode {i} at {coordinate}>".format(i=self.index, coordinate=self.coordinate)

        def __eq__(self, other):
            if isinstance(other, int):
                return self.index == other
            elif isinstance(other, BaseNode):
                return self.index == other.index
            else:
                raise TypeError("%s cannot be compared with instance of %s" % (other.__class__, self.__class__))


    class BaseEdge:
        """An edge is the part that connecting two nodes"""

        def __init__(self, length: int):
            self.length = length
            self.nodes = []

        def add_node(self, node: BaseNode):
            if len(self.nodes) > 1:
                raise OverflowError("An edge can only connect nodes. Current parents are %s and %s" % self.nodes)
            elif node in self.nodes:
                raise ValueError("%s is already a node of this edge" % node)
            else:
                self.nodes.append(node)

        def __len__(self):return self.length

        def __repr__(self):
            return "<BaseEdge with length of "+str(self.length)+">"

Graph.py
========

.. code-block:: Python

    from AbstractBaseClasses import BaseNode, BaseEdge, DirectionNotExist
    import sys


    class Node(BaseNode):
        map={} # A dict that stores coverage area of a node. This is used for fast overlap testing

        def __init__(self,*coordinate):
            super().__init__(*coordinate)
            self.x=coordinate[0]
            self.y=coordinate[1]

            # Add this node to map
            for i in range(self.radius):
                for j in range(self.radius):
                    self.__class__.map[(self.x+i,self.y+j)]=self.index
                    self.__class__.map[(self.x - i, self.y + j)] = self.index
                    self.__class__.map[(self.x + i, self.y - j)] = self.index
                    self.__class__.map[(self.x - i, self.y - j)] = self.index

        @classmethod
        def find_overlap(cls,*coordinate) -> int:
            """returns the index number of the overlapping node, -1 if no such node is found"""
            try:
                assert isinstance(coordinate, (tuple, list))
                assert len(coordinate) == 2
                assert isinstance(coordinate[0], int)
                assert isinstance(coordinate[1], int)
            except AssertionError:
                err = TypeError("Coordinate must be a tuple (x,y), where x and y are int")
                err.__suppress_context__ = True
                raise err

            try:
                return cls.map[coordinate]
            except KeyError:
                return -1

        def __repr__(self):
            return "<Node {i} at {coordinate}>".format(i=self.index, coordinate=self.coordinate)

        @property
        def W(self):
            if self.west_edge:
                return self.west_edge
            else:
                raise DirectionNotExist(
                        "Attempting to access a non-existent edge West of node {index} at {coordinate}".format(
                                index=self.index,
                                coordinate=self.coordinate))

        @property
        def E(self):
            if self.east_edge:
                return self.east_edge
            else:
                raise DirectionNotExist(
                        "Attempting to access a non-existent edge East of node {index} at {coordinate}".format(
                                index=self.index,
                                coordinate=self.coordinate))

        @property
        def N(self):
            if self.north_edge:
                return self.north_edge
            else:
                raise DirectionNotExist(
                        "Attempting to access a non-existent edge North of node {index} at {coordinate}".format(
                                index=self.index, coordinate=self.coordinate))

        @property
        def S(self):
            if self.south_edge:
                return self.south_edge
            else:
                raise DirectionNotExist(
                        "Attempting to access a non-existent edge South of node {index} at {coordinate}".format(
                                index=self.index, coordinate=self.coordinate))

        def add_edge(self, direction: str, edge):
            try:
                assert isinstance(edge, BaseEdge), "Edge must be an instance of BaseEdge"
                assert (direction in ("N", "E", "S", "W")), "Direction must be  W,E,S or N"
            except AssertionError as err:  # Transform the AssertionError into a TypeError
                err = TypeError(err)
                err.__suppress_context__ = True
                raise err

            if direction == "N":
                self.north_edge = edge
            elif direction == "S":
                self.south_edge = edge
            elif direction == "E":
                self.east_edge = edge
            elif direction == "W":
                print('adding west')
                self.west_edge = edge

            edge.add_node(self)


        def connect_to(self,node):
            if not isinstance(node,BaseNode):
                raise TypeError("Node must be an instance of BaseNode")

            dy=abs(node.y-self.y)
            dx=abs(node.x-self.x)
            if dy>self.radius and dx>self.radius: raise ValueError("{node0} and {node1} are not in a straight line".format(node1=node,node0=self))
            raise NotImplemented



    class DeadEnd(BaseNode):
        """A dead end has only one direction"""

        def __init__(self,coordinate):
            super().__init__(coordinate)
            self.x=coordinate[0]
            self.y=coordinate[1]
            self.edge=None
            self.direction=None


        def add_edge(self, direction: str, edge):
            try:
                assert isinstance(edge, BaseEdge), "Edge must be an instance of BaseEdge"
                assert (direction in ("N", "E", "S", "W")), "Direction must be  W,E,S or N"
            except AssertionError as err:  # Transform the AssertionError into a TypeError
                err = TypeError(err)
                err.__suppress_context__ = True
                raise err

            self.edge=edge
            self.direction=direction
            edge.add_node(self)

        def get_edge(self):
            """returns a tuple (edge,direction)"""
            if self.edge:
                return (self.edge,self.direction)
            else:
                raise DirectionNotExist

        def __repr__(self):
            return "<DeadEnd {i} at {coordinate}>".format(i=self.index, coordinate=self.coordinate)


    class Edge(BaseEdge):

        def __init__(self,length,node0,node1):
            super().__init__(length)
            self.nodes.append(node0)
            self.nodes.append(node1)

        def is_connecting_to(self, origin_index) -> Node:
            """Return the node to which the origin node is connecting"""

            if origin_index in self.nodes:
                return self.nodes[1] if origin_index == self.nodes[0] else self.nodes[1]
            else:
                raise ValueError("Node %d is not connected with this edge" % origin_index)

        def __repr__(self):
            return "<Edge of length {length} connecting {node0} to {node1}>".format(length=self.length, node0=repr(self.nodes[0]), node1=(self.nodes[1]))

    class EdgeNotDiscovered(Exception): pass


    class UndiscoveredEdge(BaseEdge):
        def __init__(self,node):
            super().__init__(length=sys.maxsize)  # This edge is undiscovered so its length is set to infinity
            self.nodes.append(node)

        def is_connecting_to(self, origin_index) -> Node:
            """Return the node to which the origin node is connecting"""
            raise EdgeNotDiscovered("This edge is not discovered yet. We don't know where it is connecting to")
